// <auto-generated />
using System;
using InvoiceManager.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InvoiceManager.Infrastructure.Migrations
{
    [DbContext(typeof(InvoiceManagerContext))]
    partial class InvoiceManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("InvoiceManager.Domain.Entities.CreditNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<decimal>("CreditNoteAmount")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "credit_note_amount");

                    b.Property<DateTime>("CreditNoteDate")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "credit_note_date");

                    b.Property<int>("CreditNoteNumber")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "credit_note_number");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("CreditNotes");

                    b.HasAnnotation("Relational:JsonPropertyName", "invoice_credit_note");
                });

            modelBuilder.Entity("InvoiceManager.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_email");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_name");

                    b.Property<string>("CustomerRun")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_run");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasAnnotation("Relational:JsonPropertyName", "customer");
                });

            modelBuilder.Entity("InvoiceManager.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_id");

                    b.Property<int>("DaysToDue")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "days_to_due");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "invoice_date");

                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "invoice_number");

                    b.Property<string>("InvoiceStatus")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "invoice_status");

                    b.Property<DateTime>("PaymentDueDate")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "payment_due_date");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "payment_status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "total_amount");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("InvoiceManager.Domain.Entities.InvoiceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "product_name");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "quantity");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "subtotal");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "unit_price");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceDetails");

                    b.HasAnnotation("Relational:JsonPropertyName", "invoice_detail");
                });

            modelBuilder.Entity("InvoiceManager.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "payment_date");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "payment_method");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.ToTable("Payments");

                    b.HasAnnotation("Relational:JsonPropertyName", "invoice_payment");
                });

            modelBuilder.Entity("InvoiceManager.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("InvoiceManager.Domain.Entities.CreditNote", b =>
                {
                    b.HasOne("InvoiceManager.Domain.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceCreditNote")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("InvoiceManager.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("InvoiceManager.Domain.Entities.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("InvoiceManager.Domain.Entities.InvoiceDetail", b =>
                {
                    b.HasOne("InvoiceManager.Domain.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceDetail")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("InvoiceManager.Domain.Entities.Payment", b =>
                {
                    b.HasOne("InvoiceManager.Domain.Entities.Invoice", "Invoice")
                        .WithOne("Payment")
                        .HasForeignKey("InvoiceManager.Domain.Entities.Payment", "InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("InvoiceManager.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("InvoiceManager.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceCreditNote");

                    b.Navigation("InvoiceDetail");

                    b.Navigation("Payment")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
